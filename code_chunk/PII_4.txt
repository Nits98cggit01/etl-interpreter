import re

def intck_handler(st):
    l=['&','"',"'",'(']
    for i in range(len(st)):
        if(st[i]=='('):
            sp=i
    for i in range(len(st)):
        if(st[i]==')'):
            ep=i
            break
    st_n=st[sp+1:ep]
    c=st_n.split(',')
    if((('&'in c[1] or not(any(j in l for j in c[1])))or ((c[1].startswith("'") or c[1].startswith('"')) and c[1].endswith("d"))) and ((('&'in c[2] or not(any(j in l for j in c[2])))or ((c[2].startswith("'") or c[2].startswith('"')) and c[2].endswith("d"))))):
        if('&'in c[1]):
            res=c[1].split('.')[0]
            res=res.split('&')[1]
            s=res
        elif(not(any(j in l for j in c[1]))):
            s=c[1]
        else:
            if(c[1].startswith("'")):
                res=c[1].split("'")[1]
            else:
                res=c[1].split('"')[1]
            s='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
        if('&'in c[2]):
            res=c[2].split('.')[0]
            res=res.split('&')[1]
            e=res
        elif(not(any(j in l for j in c[2]))):
            e=c[1]
        else:
            if(c[2].startswith("'")):
                res=c[2].split("'")[1]
            else:
                res=c[2].split('"')[1]
            e='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
        if(len(c)>3):
            if(('d' in c[3].lower()) and ('month' in c[0].lower())):
                s=s+'+ relativedelta(day=1)'
                e=e+'+ relativedelta(day=1)'
            elif(('d' in c[3].lower()) and ('year' in c[0].lower())):
                s=s+'+ relativedelta(month=1)'
                e=e+'+ relativedelta(month=1)'
        elif(len(c)==3):
            if('month' in c[0].lower()):
                s=s+'+ relativedelta(day=1)'
                e=e+'+ relativedelta(day=1)'
            elif('year' in c[0].lower()):
                s=s+'+ relativedelta(month=1)'
                e=e+'+ relativedelta(month=1)'
        if('month' in c[0].lower()):
            result='(relativedelta('+s+','+ e+')).months'
        elif('year' in c[0].lower()):
            result='(relativedelta('+s+','+ e+')).years'
        elif('day' in c[0].lower()):
            result='(relativedelta('+s+','+ e+')).days'
    return result

def qtr_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep]
    st=st.replace('&','')
    st=st.replace('.','')
    out='pd.Timestamp('+st+').quarter'
    return out
def yyq_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep].replace('&','').replace('.','')
    st_lis=st.split(',')
    out='(datetime('+st_lis[0]+','+st_lis[1]+'*3-2,1)-datetime(1960,1,1)).days'
    return out 
def left_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep].replace('&','').replace('.','')
    out='('+st+').lstrip()'
    return out
def right_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep].replace('&','').replace('.','')
    out='('+st+').rstrip()'
    return out
def abs_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep].replace('&','').replace('.','')
    out='abs('+st+')'
    return out

def timepart_handler(st):
    st=re.sub('timepart','',st,flags=re.IGNORECASE).strip()
    st=st[1:-1]
    st=st.replace('&','')
    st=st.replace('.','')
    r='(('+st+'-parser().parse('+st+'.strftime(\'%d%b%Y\'))).total_seconds())'
    return r

#substr func
def substr_handler(st):
    l=['&','"',"'",'(']
    for i in range(len(st)):
        if(st[i]=='('):
            sp=i
    for i in range(len(st)):
        if(st[i]==')'):
            ep=i
            break;
    st_n=st[sp+1:ep]
    c=st_n.split(',')
    if('&'in c[0]):
        res=c[0].split('.')[0]
        res=res.split('&')[1]
        res=c[0]+'['+str(c[1])+'-1:'+str((c[1])+'+'+str(c[2]))+'-1]'
    elif('$' in c[0]):
        res='('+c[0]+')['+str(c[1])+'-1:'+str((c[1])+'+'+str(c[2]))+'-1]'
    elif(not(any(j in l for j in c[0]))):
        res=c[0]+'['+str(c[1])+'-1:'+str((c[1])+'+'+str(c[2]))+'-1]'
    else:
        res='('+c[0]+')['+str(c[1])+'-1:'+str((c[1])+'+'+str(c[2]))+'-1]'
    return res

def str_handler(st):
    st=re.sub('%str','',st,flags=re.IGNORECASE).strip()
    final_code=''
    d=st[1:-1]
    d=d.replace("%'","'")
    d=d.replace('%"','"')
    d=d.replace('%(','(')
    d=d.replace('%)',')')
    d=d.replace("%%","%")
    if('&' in d and '.'in d):
        d1=d.split('&')[0]
        d2=d.split('.')[1]
        d=(d.split('&')[1]).split('.')[0]
        d='\"'+d1+'\"+'+d+'+\"'+d2+'\"'
    return d    

#inputn function
def inputn_handler(st):
    if('inputn' in st):
        st=st.replace('inputn','').strip()
    elif('INPUTN' in st):
        st=st.replace('INPUTN','').strip()
   
    st_n=(st[1:-1].split(',')[1])[:-1]
    n=st[1:-1].split(',')[0]
    
    if(st_n=='yymmddn8'):
        t='%Y%m%d'
    elif(st_n=='date9'):
        t='%d%b%Y'
    elif(st_n=='yymmn6'):
        t='%Y%m'
    elif(st_n=='monyy5'):
        t='%b%y'
    elif(st_n=='yymmn4'):
        t='%y%m'
    elif(st_n=='yymmddn6'):
        t='%y%m%d'
    elif(st_n=='ddmmyyn8'):
        t='%d%m%Y'
    elif(st_n=='mmddyy4'):
        t='%m%d'
    elif(st_n=='yymmdd8'):
        t='%y-%m-%d'
    else:
        t='pythonequformat'
    if '"' in n or "'" in n:
        n=n.replace('"d','"')
        n=n.replace("'d","'")
        res='parser().parse('+n+').strftime("'+t+'")'
    elif(n.lower().strip().startswith('$intnx')):
        res='(datetime(1960,1,1)-relativedelta(days='+n+')).strftime("'+t+'")'
    else:
        res=n+'.strftime("'+t+'")'
    return res

#intnx function
def intnx_handler(st):
    st=st.replace('intnx','').strip()
    l=['&','"',"'",'(']
    st=st[1:-1]
    c=st.split(',')
    if(('&'in c[1] or not(any(j in l for j in c[1]))) or (((c[1].startswith("'") or c[1].startswith('"')) and c[1].endswith("d"))or ('today' in c[1]))):
        if('month'in c[0].lower()):
            t=c[1]
            if('&'in c[1])and not(c[1].startswith('"') or c[1].startswith("'")):
                res=c[1].split('.')[0]
                res=res.split('&')[1]
            elif(not(any(j in l for j in c[1]))):
                res=c[1].split('-')[0]
            else:
                if(c[1].startswith("'")):
                    res=c[1].replace('&','')
                    res=res.replace('.','')
                    res=res.replace("'d","'")
                    res=res.replace("'dt","'")
                    res=res.split("'")[1]
                elif(c[1].startswith('"')):
                    res=c[1].replace('&','')
                    res=res.replace('.','')
                    res=res.replace('"dt','"')
                    res=res.split('"')[1]                    
                res='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
            res=res+'+ (relativedelta(months='+c[2]+'))'
            if('-'in t):
                t=t.split('-')
                t1=''
                for i in range(1,len(t)):
                    t1=t1+'-'+t[i]
                res=res+'+ (relativedelta(days='+t1+'))'
            if(len(c)>3):
                if('b' in c[3] or 'beginning'in c[3]):
                    res=res+ '+ (relativedelta(day=1))'
                elif('e' in c[3] or 'end'in c[3]):
                    res=res+ '+ (relativedelta(day=31))'
                elif('m'in c[3] or 'middle'in c[3]):
                    res=res+ '+ (relativedelta(day=15))'
            else:
                res=res+ '+ (relativedelta(day=1))'
        elif('year'in c[0].lower()):
            t=c[1]
            if('&'in c[1]):
                res=c[1].split('.')[0]
                res=res.split('&')[1]
            elif(not(any(j in l for j in c[1]))):
                res=c[1].split('-')[0]
            else:
                if(c[1].startswith("'")):
                    res=c[1].split("'")[1]
                else:
                    res=c[1].split('"')[1]
                res='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
            res=res+'+ (relativedelta(years='+c[2]+'))'
            if('-'in t):
                t=t.split('-')
                t1=''
                for i in range(1,len(t)):
                    t1=t1+'-'+t[i]
                res=res+'+ (relativedelta(days='+t1+'))'
            if(len(c)>3):
                if('b' in c[3] or 'beginning'in c[3]):
                    res=res+ '+ (relativedelta(month=1))'
                elif('e' in c[3] or 'end'in c[3]):
                    res=res+ '+ (relativedelta(month=12))'
                elif('m'in c[3] or 'middle'in c[3]):
                    res=res+ '+ (relativedelta(month=7))'
            else:
                res=res+ '+ (relativedelta(month=1))'
        elif('week'in c[0].lower()):
            t=c[1]
            if('&'in c[1]):
                res=c[1].split('.')[0]
                res=res.split('&')[1]
            elif(not(any(j in l for j in c[1]))):
                res=c[1].split('-')[0]
            else:
                if(c[1].startswith("'")):
                    res=c[1].split("'")[1]
                else:
                    res=c[1].split('"')[1]
                res='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
            tem=res
            if('-'in t):
                t=t.split('-')
                t1=''
                for i in range(1,len(t)):
                    t1=t1+'-'+t[i]
                res=res+'+ (relativedelta(days='+t1+'))'
            wd=tem+'.weekday()'
            extra_intnx='temp='+wd+'\n'+'if(temp==6):\n\ttemp=0'+'\nelse:\n\ttemp+=1\n'
            extra_list.append(extra_intnx)
            if(len(c)>3):
                if('b'in c[3] or 'beginning'in c[3]):
                    if(int(c[2])>0):
                        day='7-temp+('+c[2]+'-1)*7'
                        res=res+ '+ (relativedelta(days='+day+'))'
                    else:
                        day='-temp+('+c[2]+')*7'
                        res=res+ '+ (relativedelta(days='+day+'))'
                elif('m'in c[3] or 'middle'in c[3]):
                    day='3-temp+('+c[2]+')*7'
                    res=res+ '+ (relativedelta(days='+day+'))'
                elif('e'in c[3] or 'end'in c[3]):
                    if(int(c[2])>=0):
                        day='6-temp+('+c[2]+')*7'
                        res=res+ '+ (relativedelta(days='+day+'))'
                    else:
                        day='-1-temp+('+c[2]+'+1)*7'
                        res=res+ '+ (relativedelta(days='+day+'))'      
                elif('s'in c[3] or 'same'in c[3]):
                    day=c[2]+'*7'
                    res=res+ '+ (relativedelta(days='+day+'))'  
            elif(len(c)==3):
                if(int(c[2])>0):
                    day='7-temp+('+c[2]+'-1)*7'
                    res=res+ '+ (relativedelta(days='+day+'))'
                else:
                    day='-temp+('+c[2]+')*7'
                    res=res+ '+ (relativedelta(days='+day+'))'
        elif('day'in c[0].lower()):
            t=c[1]
            if('&'in c[1]):
                res=c[1].split('.')[0]
                res=res.split('&')[1]
            elif(not(any(j in l for j in c[1]))):
                if('-' in c[1]):
                    res=c[1].split('-')[0]
            else:
                if(c[1].startswith("'")):
                    res=c[1].split("'")[1]
                else:
                    res=c[1].split('"')[1]
                res='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
            res=res+'+ (relativedelta(days='+c[2]+'))'
            if('-'in t):
                t=t.split('-')
                t1=''
                for i in range(1,len(t)):
                    t1=t1+'-'+t[i]
                res=res+'+ (relativedelta(days='+t1+'))'
        if('qtr'in c[0].lower()):
            t=c[1]
            if('&'in c[1])and not(c[1].startswith('"') or c[1].startswith("'")):
                res=c[1].split('.')[0]
                res=res.split('&')[1]
            elif(not(any(j in l for j in c[1]))):
                res=c[1].split('-')[0]
            else:
                if(c[1].startswith("'")):
                    res=c[1].replace('&','')
                    res=res.replace('.','')
                    res=res.replace("'d","'")
                    res=res.replace("'dt","'")
                    res=res.split("'")[1]
                elif(c[1].startswith('"')):
                    res=c[1].replace('&','')
                    res=res.replace('.','')
                    res=res.replace('"dt','"')
                    res=res.split('"')[1]                    
                res='datetime.strptime("'+res+ '",'+'"%d%b%Y")'
            res=res+'+ relativedelta(months=3*'+str(c[2])+')+relativedelta(month=3*(pd.Timestamp('+str(res)+'+relativedelta(months=3*'+str(c[2])+')).quarter)-2)'
            if('-'in t):
                t=t.split('-')
                t1=''
                for i in range(1,len(t)):
                    t1=t1+'-'+t[i]
                res=res+'+ (relativedelta(days='+t1+'))'
            if(len(c)>3):
                if('b' in c[3] or 'beginning'in c[3]):
                    res=res+ '+ (relativedelta(day=1))'
                elif('e' in c[3] or 'end'in c[3]):
                    res=res+ '+(relativedelta(months=2))+(relativedelta(day=31))'
            else:
                res=res+ '+ (relativedelta(day=1))'    
    res='(('+res+')-datetime(1960,1,1)).days'
    return res

def datepart_handler(st):
    st=re.sub('datepart','',st,flags=re.IGNORECASE).strip()
    st=st[1:-1]
    st=st.replace('&','')
    st=st.replace('.','')
    r='(parser().parse('+st+'.strftime(\'%d%b%Y\'))-datetime(1960,1,1)).days'
    return r

def qscan_handler(st):
    st=st.replace('%qscan','').strip()
    st=st[1:-1]
    w=st.split(",")
    c=len(w)
    if(w[0].startswith('"') or w[0].startswith("'")):
        pass
    else:
        w[0]=w[0].replace('&','')
        w[0]=w[0].replace('.','')
    if(c==4):
        tw=w[3]
        if(tw.lower()=='a'):
            q='a-zA-Z'
        elif(tw.lower()=='d'):
            q='0-9'
        elif(tw.lower()=='f'):
            q='a-zA-Z_'
        elif(tw.lower()=='l'):
            q='a-z'
        elif(tw.lower()=='u'):
            q='A-Z'
        else:
            q=''
        w[2]=w[2]+q
    r='(list(filter(None,(re.sub("['+w[2]+']","%",'+w[0]+')).split("%"))))['+str(w[1])+'-1]'
    #r=s+'=(re.sub(\"['+w[2]+']\",\"%\",'+w[0]+')).split(\"%\")\nwhile \"\" in '+s+':\n\t'+s+'.remove(\"\")\n'+s+'='+s+'['+str(int(w[1])-1)+']'
    final_code=r
    return final_code    

def upcase_handler(st):
    st=re.sub('upcase','',st,flags=re.IGNORECASE).strip()
    st=st[1:-1].strip()
    res='('+st+').upper()'
    return res
def lowcase_handler(st):
    st=re.sub('lowcase','',st,flags=re.IGNORECASE).strip()
    st=st[1:-1].strip()
    res='('+st+').lower()'
    return res

#putn function
def putn_handler(st):
    if('putn' in st):
        st=st.replace('putn','').strip()
    elif('PUTN' in st):
        st=st.replace('PUTN','').strip()
    # print(st)
    st_n=(st[1:-1].split(',')[1])[:-1]
    n=st[1:-1].split(',')[0]
    # print(n)
    if(st_n=='yymmddn8'):
        t='%Y%m%d'
    elif(st_n=='date9'):
        t='%d%b%Y'
    elif(st_n=='yymmn6'):
        t='%Y%m'
    elif(st_n=='monyy5'):
        t='%b%y'
    elif(st_n=='yymmn4'):
        t='%y%m'
    elif(st_n=='yymmddn6'):
        t='%y%m%d'
    elif(st_n=='ddmmyyn8'):
        t='%d%m%Y'
    elif(st_n=='mmddyy4'):
        t='%m%d'
    elif(st_n=='yymmdd8'):
        t='%y-%m-%d'
    else:
        t='pythonequformat'
    if '"' in n or "'" in n:
        n=n.replace('"d','"')
        n=n.replace("'d","'")
        res='parser().parse('+n+').strftime("'+t+'")'
    elif(n.lower().strip().startswith('$intnx')):
        res='(datetime(1960,1,1)-relativedelta(days='+n+')).strftime("'+t+'")'
    else:
        res=n+'.strftime("'+t+'")'
    return res    

def today_handler(st):
    r='(date.today()-date(1960,1,1)).days'
    return r
def date_handler(st):
    r='(date.today()-date(1960,1,1)).days'
    return r
def datetime_handler(st):
    r='(datetime.today()-datetime(1960,1,1)).total_seconds()'
    return r
def month_handler(st):
    st=st.replace('month','').strip()
    st=st.replace('MONTH','').strip()
    st=st[1:-1].replace('&','').replace('.','')
    r='('+st+').month'
    return r
def year_handler(st):
    st=st.replace('year','').strip()
    st=st.replace('YEAR','').strip()
    st=st[1:-1].replace('&','').replace('.','')
    r='('+st+').year'
    return r
def mdy_handler(st):
    st=st.replace('mdy','').strip()
    st=st.replace('MDY','').strip()
    st=st[1:-1].replace('&','').replace('.','')
    w=st.split(',')
    r='date('+w[2]+','+w[0]+','+w[1]+')'
    return r
def time_handler(st):
    r='(datetime.today()-datetime(1960,1,1)).total_seconds()-(date.today()-date(1960,1,1)).total_seconds()'
    return r

def sysfunc_handler(st):
    st=st.replace('%sysfunc','').strip()
    dic={'yymmddn8.':"%Y%m%d",'date9.':"%d%b%Y",'mmddyy4.':"%m%d",'yymmdd8.':"%y-%m-%d",'yymmdd10.':"%Y-%m-%d",'yymmn6.':'%Y%m',
         'date7.':"%d%b%y",'mmyyn4.':"%m%y",'monyy.':'%b%y','monyy5.':'%b%y','yymmn4.':'%y%m',
         'yymmddn6.':'%y%m%d','ddmmyyn8.':'%d%m%Y','yymmddn.':'%Y%m%d','yymmn.':'%Y%m','yymmd':'%Y-%m',
         'time5.':'%H:%M','time2.':'%H','time8.':'%H:%M:%S','timeampm10.0':'%H:%M %p','datetime25.0':'%d%b%Y:%H:%M:%S','datetime20.0':'%d%b%Y:%H:%M:%S'}
    st=st[1:-1]
    if(',' not in st):
        if(st.lower().strip().startswith('$intnx')):
            st='(datetime(1960,1,1)+relativedelta(days='+st+'))'
        r=st
    else:
        st_list=st.split(',')
        if(st_list[0].lower().strip().startswith('$intnx')):
            st_list[0]='(datetime(1960,1,1)+relativedelta(days='+st_list[0]+'))'
        if(st_list[1].lower() in dic.keys()):
            if(st_list[0].startswith('&')):
                st_list[0]=st_list[0].replace('&','').replace('.','')
            r='('+st_list[0]+').strftime("'+dic[st_list[1]]+'")'
        else:
            r=st_list[0]
    return r

def put_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep]
    st_list=st.split(',')
    dic={'yymmddn8.':"%Y%m%d",'date9.':"%d%b%Y",'mmddyy4.':"%m%d",'yymmdd8.':"%y-%m-%d",'yymmdd10.':"%Y-%m-%d",'yymmn6.':'%Y%m',
         'date7.':"%d%b%y",'mmyyn4.':"%m%y",'monyy.':'%b%y','monyy5.':'%b%y','yymmn4.':'%y%m',
         'yymmddn6.':'%y%m%d','ddmmyyn8.':'%d%m%Y','yymmddn.':'%Y%m%d','yymmn.':'%Y%m','yymmd':'%Y-%m',
         'time5.':'%H:%M','time2.':'%H','time8.':'%H:%M:%S','timeampm10.0':'%H:%M %p','datetime25.0':'%d%b%Y:%H:%M:%S','datetime20.0':'%d%b%Y:%H:%M:%S'}
    if (st_list[1].strip().lower() in dic.keys()):
        if(st_list[0].lower().strip().startswith('&')):
            st_list[0]=st_list[0].replace('&','').replace('.','')
        elif(st_list[0].lower().strip().startswith('"') or st_list[0].lower().strip().startswith('"')):
            st_list[0]=st_list[0].replace('"d','"').replace("'d","'")
            st_list[0]='parser().parse('+st_list[0]+')'
        elif(st_list[0].lower().strip().startswith('$intnx')):
            st_list[0]='(datetime(1960,1,1)+relativedelta(days='+st_list[0]+'))'
        out='('+st_list[0].strip()+').strftime("'+dic[st_list[1]]+'")'
    elif(len(re.findall('\\b[0-9]+.',st_list[1].strip().lower()))>0):
        out='('+st_list[0]+')[:'+str((st_list[1].strip())[:-1])+']'
    else:
        out=st_list[0]
    return out        

def input_handler(st):
    sp=st.find('(')
    ep=st.rfind(')')
    st=st[sp+1:ep]
    st_list=st.split(',')
    dic={'yymmddn8.':"%Y%m%d",'mmyyn4.':"%m%y",'yymmddn6.':'%y%m%d','ddmmyyn8.':'%d%m%Y'}
    if (st_list[1].strip().lower() in dic.keys()):
        if(st_list[0].lower().strip().startswith('&')):
            st_list[0]=st_list[0].replace('&','').replace('.','')
        elif(st_list[0].lower().strip().startswith('"') or st_list[0].lower().strip().startswith('"')):
            st_list[0]=st_list[0].replace('"d','"').replace("'d","'")
            st_list[0]='parser().parse('+st_list[0]+')'
        elif(st_list[0].lower().strip().startswith('$intnx')):
            st_list[0]='(datetime(1960,1,1)+relativedelta(days='+st_list[0]+'))'
        out='('+st_list[0].strip()+').strftime("'+dic[st_list[1]]+'")'
    elif(len(re.findall('\\b[0-9]+.',st_list[1].strip().lower()))>0):
        out='('+st_list[0]+')[:'+str((st_list[1].strip())[:-1])+']'
    else:
        out=st_list[0]
    return out

def eval_handler(lis):
    sp=lis.find('(')
    ep=lis.rfind(')')
    lis=lis[sp+1:ep]
    flag=False
    a=lis.strip()
    a1=re.sub('\+|\-|\*|\/',' ',a).split(' ')
    while "" in a1:
        a1.remove('')
    a2=[]
    for i in a1:
        if('&' in i):
            i=i.replace('&','')
            i=i.replace('.','')
        a2.append(i)
    lis=[]
    for i in a:
        if((i=='+')|(i=='*')|(i=='-')|(i=='/')):
            lis.append(i)
    out=''
    for i in range(len(lis)):
        out=out+a2[i]+lis[i]
    out=out+a2[-1]
    return out

def sysevalf_handler(lis):
    sp=lis.find('(')
    ep=lis.rfind(')')
    lis=lis[sp+1:ep]
    flag=False
    if(',' in lis):
        flag=True
        a=lis.split(',')[0].strip()
        arg=lis.split(',')[1].strip()
    else:
        a=lis.strip()
    a1=re.sub('\+|\-|\*|\/',' ',a).split(' ')
    while "" in a1:
        a1.remove('')
    a2=[]
    for i in a1:
        if('&' in i):
            i=i.replace('&','')
            i=i.replace('.','')
        a2.append(i)
    lis=[]
    for i in a:
        if((i=='+')|(i=='*')|(i=='-')|(i=='/')):
            lis.append(i)
    out=''
    for i in range(len(lis)):
        out=out+a2[i]+lis[i]
    out=out+a2[-1]
    if not(any(j=="." for j in a1)):
        if(flag):
            if(arg.lower().startswith('int')):
                out='int('+out+')'
            elif(arg.lower().startswith('bool')):
                out='int(bool('+out+'))'
            elif(arg.lower()=='floor'):
                out='floor('+out+')'
            elif(arg.lower()=='ceil'):
                out='ceil('+out+')'
    else:
        if(flag):
            if(arg.lower().startswith('bool')):
                out='0'
            else:
                out='.'
        else:
            out='.'
    return out

funcs_dict = {'intnx':intnx_handler, 'substr':substr_handler,'intck':intck_handler,'%sysevalf':sysevalf_handler,'putn':putn_handler,'inputn':inputn_handler,
              '%qscan':qscan_handler,'today':today_handler,'date':date_handler,'datetime':datetime_handler,'month':month_handler,
              'year':year_handler,'mdy':mdy_handler,'time':time_handler,'%sysfunc':sysfunc_handler,'left':left_handler,
              '%left':left_handler,'abs':abs_handler,'put':put_handler,'input':input_handler,
              'datepart':datepart_handler,'%str':str_handler,'qtr':qtr_handler,'yyq':yyq_handler,'right':right_handler,
              '%eval':eval_handler,'upcase':upcase_handler,'lowcase':lowcase_handler,'timepart':timepart_handler} 

def nested_func_handler(nested_func):                            
    invalid_chars = [',', '/', '+', '-', '*']
    nested_func = re.sub('\s*[,]\s*', ',', nested_func).strip()
    stack = ""
    i = 0
    #dict to replace eqts in final stack
    eqt_dict = {}
    while i < len(nested_func):
        if nested_func[i] == ')':
            j = i-1
            par_stack = [')']
            while par_stack and j >= 0:
                if nested_func[j] == ')':
                    par_stack.append(nested_func[j])
                if nested_func[j] == '(':
                    par_stack.pop(-1)   
                j-=1
            j+=1
            args_str = nested_func[j+1:i]
            k = j-1
            while nested_func[k] not in invalid_chars and nested_func[k]!='(' and k>0:
                k-=1
            
            if k == 0:
                func_name = nested_func[k:j]
            else:
                func_name = nested_func[k+1:j]
            
            func_clause = func_name + '(' + args_str + ')'
            
            func_name=func_name.replace("'",'')
            func_name=func_name.replace('"','')
            if func_name.lower().strip() in funcs_dict.keys():
            
                if k == 0:
                    stack = ""
                else:
                    stack = nested_func[:k+1]                               
                if '{}_count'.format(func_name) not in locals():
                    locals()['{}_count'.format(func_name)] = 0
                eqt_str = ('${}_eqt_'.format(func_name)) + str(locals()['{}_count'.format(func_name)]) + '$'
                locals()['{}_count'.format(func_name)] += 1
                eqt_dict[eqt_str] = funcs_dict[func_name.lower()](func_clause)
                stack += eqt_str
                l = len(stack)
                remaining_nested_func = nested_func[i+1:]
                nested_func = stack + remaining_nested_func
                i = l-1
            
            
            else:
                stack += nested_func[i]
            
        else:
            stack += nested_func[i]
        
        i+=1

       
    return stack, eqt_dict

def unpacker(stack, eqt_dict):
    l = len(eqt_dict)
    for i in range(l):
        for key in eqt_dict.keys():
            stack = stack.replace(key, eqt_dict[key]) 
    dic={'yymmddn8.':"%Y%m%d",'date9.':"%d%b%Y",'mmddyy4.':"%m%d",'yymmdd8.':"%y-%m-%d",'yymmdd10.':"%Y-%m-%d",'yymmn6.':'%Y%m',
         'date7.':"%d%b%y",'mmyyn4.':"%m%y",'monyy.':'%b%y','monyy5.':'%b%y','yymmn4.':'%y%m',
         'yymmddn6.':'%y%m%d','ddmmyyn8.':'%d%m%Y','yymmddn.':'%Y%m%d','yymmn.':'%Y%m','yymmd':'%Y-%m',
         'time5.':'%H:%M','time2.':'%H','time8.':'%H:%M:%S','timeampm10.0':'%H:%M %p','datetime25.0':'%d%b%Y:%H:%M:%S'}
    if(any(val in stack for val in dic.values())):
        stack=stack.replace('(datetime.today()-datetime(1960,1,1)).total_seconds()-(date.today()-date(1960,1,1)).total_seconds()','datetime.now()')
        stack=stack.replace('(datetime.today()-datetime(1960,1,1)).total_seconds()','datetime.today()')
        stack=stack.replace('(date.today()-date(1960,1,1)).days','date.today()')
    ext_list=re.findall('\(parser\(\).parse\([a-zA-Z&.0-9_]+.strftime\(\'%d%b%Y\'\)\)-datetime\(1960,1,1\)\).days',stack)
    if(len(ext_list)>0):
        tem_stack=stack
        for j in ext_list:
            tem_stack=tem_stack.replace(j,'')
        if(any(val in tem_stack for val in dic.values())):
            for lisval in ext_list:
                stack=stack.replace(lisval,'(datetime(1960,1,1)+relativedelta(days='+lisval+'))')
    ext_list2=re.findall('\(\([a-zA-Z&.0-9_]+\-parser\(\).parse\([a-zA-Z&.0-9_]+.strftime\(\'%d%b%Y\'\)\)\).total_seconds\(\)\)',stack)
    if(len(ext_list2)>0):
        tem_stack1=stack
        for j in ext_list2:
            tem_stack1=tem_stack1.replace(j,'')
        if(any(val in tem_stack1 for val in dic.values())):
            for lisval in ext_list2:
                stack=stack.replace(lisval,'(datetime(1960,1,1)+relativedelta(seconds='+lisval+'))')
    return stack

def convert_func(line):    
    line = re.sub('call symput', 'call_symput', line)
    line = re.sub('\s*\(\s*', '(', line).strip()              
    func_names = funcs_dict.keys()
    invalid_chars = [',', ' ', '=', '-']
    converted_output = ''
    l = len(converted_output)
    i = 0
    while i < len(line):
        if line[i] == '(':
            j = i
            while line[j] not in invalid_chars and j > 0:
                j -= 1    
            if j != 0:
                j += 1    
            word = line[j:i]
            i+=1
            par_stack = ['(']
            while par_stack:
                if line[i] == '(':
                    par_stack.append(line[i])
                if line[i] == ')':
                    par_stack.pop(-1)   
                i+=1
            if word.lower() in func_names:
                string, diction = nested_func_handler(line[j:i].strip())
                converted_output += line[l:j] + unpacker(string, diction)
                line = converted_output + line[i:]
                l = len(converted_output)
                i = l-1
            else:
                converted_output += line[l:i]
                line = converted_output + line[i:]
                l = len(converted_output)
                i = l-1
        i += 1
    return line

def python_let_accel(input_path):
    try:
        f=open(input_path,"r")
        filedata=f.read()

        filedata = re.sub('\/\*.+\*\/','',filedata).strip()

        # Write the file out again
        # with open(input_path, 'w') as file:
        #     file.write(filedata)

        # for i in r:
        final_code=''
        # f = open(input_path, "r")
        j=filedata
        l=['&','"',"'",'(']
        global extra_list
        extra_list=[]
        keys=['intnx', 'substr','intck', '%sysevalf','putn','inputn','%qscan','today','date','datetime','month','year','mdy','time','%sysfunc','datepart','%str','%eval','upcase','lowcase','timepart']
        j=j.replace(';','')
        lis=j.split('=')
        lis[1]=lis[1].strip()
        final_code=final_code+lis[0].split(' ')[1].strip()+'='
        if(any(key in lis[1].lower() for key in keys)):
            final_code=final_code+convert_func(lis[1].strip())
            # print(convert_func(lis[1].strip()))
        elif('ifc' in j):
            final_code=final_code+'code need to be converted manually'
        elif(lis[1].strip()==''):
            final_code=final_code+'""'
        elif(lis[1].strip().lower()=='null'):
            final_code=final_code+'np.nan'
        elif('||' in lis[1]):
            lisof=lis[1].split('||')
            out=''
            for i in lisof:
                i=i.replace('&','').replace('.','')
                out=out+i+'+'
            final_code=final_code+out[:-1]
        elif('/'in lis[1]):
            tem=lis[1]
            if tem.startswith('"') or tem.startswith("'"):
                    tem=tem[1:-1]
            if('&' in tem):
                tem_lis=re.findall('&[a-zA-Z0-9_]+[.]?',tem)
                for le in range(len(tem_lis)):
                    tem_lis[le]=tem_lis[le].replace('&','').replace('.','')
                tem=re.sub('&[a-zA-Z0-9_]+[.]?','$mac',tem)
                tem=tem.split('$mac')
                tem_out=''
                for ite in range(len(tem)):
                    if(ite+1!=len(tem)):
                        if(ite==0):
                            tem_out=tem_out+'"'+tem[ite]+'"+str('+tem_lis[ite]+')'
                        else:
                            tem_out=tem_out+'+"'+tem[ite]+'"+str('+tem_lis[ite]+')'
                    else:
                        tem_out=tem_out+'+"'+tem[ite]+'"'   
            else:
                tem_out='"'+tem+'"'
            tem=tem_out.replace('""+','').replace('+""','')        
            final_code=final_code+tem_out 
        elif(not(any(j in l for j in lis[1]))):
            tem=lis[1].split(';')[0]
            #tem=tem.replace(' ','')
            tem_list=['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec']
            if(tem.isalpha()):
                final_code=final_code+'"'+tem+'"'
            elif(any(i in tem.lower() for i in tem_list)):
                    final_code=final_code+'"'+tem+'"'
            elif(((tem.replace('.', '')).replace('-','')).isdigit()):
                if(tem.count('.')>1):
                    final_code=final_code+'"'+tem+'"'
                else:
                    final_code=final_code+tem
            else:
                final_code=final_code+'"'+tem+'"'
        elif(lis[1].startswith('"')):
            tem=lis[1]
            tem=tem.replace('""','"')
            if('&' in tem):
                tem=tem.replace('&','')
                tem=tem.replace('.','')
            #tem=tem.split(';')[0] 
            if tem.endswith('"d'):
                tem=tem[:-1]
                tem='parser().parse('+tem+')'
                # print(tem)
            elif(tem.endswith('dt')):
                tem=tem[1:-3]
                if(':' in tem):
                    tem='datetime.strptime("'+tem+'","%d%b%Y:%H:%M:%S")'
                else:
                    tem='datetime.strptime('+tem+',"%d%b%Y:%H:%M:%S")'
            final_code=final_code+tem   
        elif(lis[1].startswith("'")):
            tem=lis[1]
            #tem=tem.split(';')[0] 
            tem=tem.replace('\n','') 
            if(',' in tem):
                final_code=final_code+'['+tem+']'
            elif(tem.endswith("'d")):
                tem=tem[:-1]
                tem='parser().parse('+tem+')'
                # print(tem)
                final_code=final_code+tem
            elif(tem.endswith("'dt")):
                tem=tem[1:-3]
                if(':' in tem):
                    tem='datetime.strptime("'+tem+'","%d%b%Y:%H:%M:%S")'
                else:
                    tem='datetime.strptime('+tem+',"%d%b%Y:%H:%M:%S")'
            else:
                final_code=final_code+tem
        elif(lis[1].startswith("('") and lis[1].count(',')>0):
            final_code=final_code+tem
        elif('&' in lis[1]):
            tem=lis[1].strip()
            tem_list=re.findall('[&]+[a-zA-Z0-9_]+[.]?',tem)
            tem2=lis[1].strip()
            for u in tem_list:
                tem2=tem2.replace(u,'')
            if(tem2==''):
                tem=tem.replace('&','_')
                tem=tem.replace('.','')  
                if(tem.startswith('_')):
                    tem=tem[1:]
                    if(tem.startswith('_')):
                        tem=tem[1:]
            else:
                tem_lis=re.findall('&[a-zA-Z0-9_]+[.]?',tem)
                for le in range(len(tem_lis)):
                    tem_lis[le]=tem_lis[le].replace('&','').replace('.','')
                tem=re.sub('&[a-zA-Z0-9_]+[.]?','$mac',tem)
                tem=tem.split('$mac')
                tem_out=''
                for ite in range(len(tem)):
                    if(ite+1!=len(tem)):
                        if(ite==0):
                            tem_out=tem_out+'"'+tem[ite]+'"+str('+tem_lis[ite]+')'
                        else:
                            tem_out=tem_out+'+"'+tem[ite]+'"+str('+tem_lis[ite]+')'
                    else:
                        tem_out=tem_out+'+"'+tem[ite]+'"'
                # print("tem out:",tem_out)
                tem=tem_out.replace('""+','').replace('+""','')
            final_code=final_code+tem
        else:
            final_code=final_code+'code need to be converted manually'
        if extra_list!=[]:
            for i in extra_list:
                final_code=i+final_code+'\n'
            f.close()
        if ("code need to be converted manually") in final_code:
            final_code="#These lines should be converted manually for "+input_path.split("_")[-2]+"\n"+filedata.strip()
        return final_code
    except Exception as e:
        return None